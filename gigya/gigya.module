<?php
use Drupal\gigya\Helper\GigyaHelper;
use Aws\S3\S3Client;
use Aws\S3\Exception\S3Exception;
use Drupal\Component\Utility;
/**
 * Implements hook_page_attachments().
 * @param array $attachments
 */
function gigya_page_attachments(array &$attachments) {
  //Check for api key.
  $api_key = \Drupal::config('gigya.settings')->get('gigya.gigya_api_key');
  if (!empty($api_key)) {
    //Add gigya params to drupalSettings.
    $global_params = \Drupal::config('gigya.global')->get('gigya.globalParameters');
    \Drupal::moduleHandler()->alter('gigya_global_parameters', $global_params);

    $attachments['#attached']['drupalSettings']['gigya']['globalParameters'] = $global_params;
    $attachments['#attached']['drupalSettings']['gigya']['apiKey'] = \Drupal::config('gigya.settings')->get('gigya.gigya_api_key');
    $attachments['#attached']['drupalSettings']['gigya']['dataCenter'] = \Drupal::config('gigya.settings')->get('gigya.gigya_data_center');

    $lang = \Drupal::config('gigya.global')->get('gigya.language');
    //Check if lang is in auto mode.
    if (strtolower($lang) == 'auto') {
      $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();

      $helper = new GigyaHelper();

      $languages = $helper->getGigyaLanguages();

      if (!array_key_exists($lang, $languages)) {
        //If we do not have the lang in gigya set the lang to the fallback.
        $lang = \Drupal::config('gigya.global')->get('gigya.languageFallback');
      }
    }

    \Drupal::moduleHandler()->alter('gigya_lang', $lang);
    $attachments['#attached']['drupalSettings']['gigya']['lang'] = $lang;

    // Add Library.
    $attachments['#attached']['library'][] = 'gigya/drupalGigya';
  }

  //added for job:
//Check if job enabled
    $jobEnabled = \Drupal::config('gigya.job')->get('gigya.enableJob');
    $attachments['#attached']['drupalSettings']['gigya']['enableJob'] = \Drupal::config('gigya.job')->get('gigya.enableJob');
    if ($jobEnabled) {
        //get jobFrequency
        $attachments['#attached']['drupalSettings']['gigya']['jobFrequency'] = \Drupal::config('gigya.job')->get('gigya.jobFrequency');
        //get emailOnSuccess
        $attachments['#attached']['drupalSettings']['gigya']['emailOnSuccess'] = \Drupal::config('gigya.job')->get('gigya.emailOnSuccess');
        //get emailOnFailure
        $attachments['#attached']['drupalSettings']['gigya']['emailOnFailure'] = \Drupal::config('gigya.job')->get('gigya.emailOnFailure');
        // get storageDetails
        $storageDetails = \Drupal::config('gigya.job')->get('gigya.storageDetails');
        \Drupal::moduleHandler()->alter('storageDetails', $storageDetails);
        $attachments['#attached']['drupalSettings']['gigya']['storageDetails'] = $storageDetails;
        gigya_job_cron();
    }

}

/**
 * Implements hook_cron().
 */

//TBD: make sure all is in sec
function gigya_job_cron() {
    $enableJob = \Drupal::config('gigya.job')->get('gigya.enableJob');
    $counterSucceed = 0;
    $counterFailed = 0;
    if ($enableJob)
    {
        $jobFrequency = \Drupal::config('gigya.job')->get('gigya.jobFrequency');
        //REQUEST_TIME
        $request_time = \Drupal::time()->getRequestTime();
        //update last run
        $last_run = \Drupal::state()->get('job.last_run', 0);

        // If x minutes passed since last time delete the rows/uids
       // if (($request_time - $last_run) > 0) {
       if (($request_time - $last_run) > $jobFrequency)
       {
            $helper = new GigyaHelper();
            $messageSucceed = "User successfully deleted from CMS - UID: ";
            $files = filesList();
            foreach ($files as $file)
            {
                if ($file['LastModified'] > $last_run && $file['Size'] > 0) {
                    $accounts = getUsers($file);

                    //foreach ($accounts as $uid)
                    for ($i = 1; $i < count($accounts); $i++) {

                        if ($user = $helper->getUidByUUID($accounts[$i])) {
                            try {
                                //get CMS's uid by Gigya uid
                                $CMSuid = $user->get('uid')->value;
                                if ($CMSuid == 1) {
                                    \Drupal::logger('gigya')->notice("Skipped deleting admin user");
                                } else {
                                    user_delete($CMSuid);
                                    $counterSucceed++;
                                    \Drupal::logger('gigya')->notice($messageSucceed . $accounts[$i]);
                                }
                            } //or with hook:  hook_user_delete($account)
                            catch (Exception $e) {
                                //add to logs
                                \Drupal::logger('gigya')->error("Failed to delete UID " . $accounts[$i] . " from CMS with error - " . $e);
                                //increase failed counter to send in email
                                $counterFailed++;
                            }
                        } else {
                            //add to logs
                            \Drupal::logger('gigya')->error("Failed to delete UID: " . $accounts[$i] . ", UID wasn't found in CMS");
                            //increase failed counter to send in email
                            $counterFailed++;
                        }

//                $query = \Drupal::database()->delete('users');
//                $query->condition('uuid == ' . $uid)
//                    ->execute();
                    }
                    if ($counterFailed > 0)
                    {
                        $total = $counterFailed + $counterSucceed;
                        $message = "CMS delete job failed for " . $counterFailed . "/" . $total;
                        $mailManager = \Drupal::service('plugin.manager.mail');
                        $module = 'gigya';
                        $to = \Drupal::config('gigya.job')->get('gigya.emailOnFailure');
                        $params['subject'] = "test";
                        $params['body'][] = "body";
                        $params['message'] = $message;
                        $title = "delete users job";
                        $key = "job_email";
                        $params['node_title'] = 'label';
                        $send = true;
                        $result = $mailManager->mail($module, $key, $to, 'en', $params, NULL, $send);
                        if (!$result)
                        {
                            \Drupal::logger('gigya')->error("Failed to send email on failure: ");
                        }

                    }
                    if ($counterSucceed > 0) {
                        $total = $counterFailed + $counterSucceed;
                        $message = "CMS delete job succeed for " . $counterSucceed . "/" . $total;
                        $mailManager = \Drupal::service('plugin.manager.mail');
                        $module = 'gigya';
                        $to = \Drupal::config('gigya.job')->get('gigya.emailOnSuccess');
                        $params['subject'] = "test";
                        $params['body'][] = "body";
                        $params['message'] = $message;
                        $title = "delete users job";
                        $key = "job_email";
                        $params['node_title'] = 'label';
                        $send = true;
                        $result = $mailManager->mail($module, $key, $to, 'en', $params, NULL, $send);
                        if (!$result)
                        {
                            \Drupal::logger('gigya')->error("Failed to send email on succeed: ");
                        }
                    }
                }
            }
            // Update last run.
            \Drupal::state()->set('job.last_run', $request_time);
        }
    }
}
function filesList()
{
    try {
    $secretKey = "";
    $storageDetails = \Drupal::config('gigya.job')->get('gigya.storageDetails');
    $helper = new GigyaHelper();
    $bucketName = $storageDetails['bucketName'];
    $accessKey = $storageDetails['accessKey'];
    $secretKeyEnc = $storageDetails['secretKey'];
    if (!empty($secretKeyEnc)) {
        $secretKey = $helper->decrypt($secretKeyEnc);
    }
    $objectKeyPrefix = $storageDetails['objectKeyPrefix'] . "/";
    $region = getRegion();
    $s3Client = S3Client::factory(array(
        'key' => $accessKey,
        'secret' => $secretKey,
        'signature' => 'v4',
        'region' => $region,
    ));

        $response = $s3Client->listObjects(array('Bucket' => $bucketName, 'MaxKeys' => 15, 'Prefix' => $objectKeyPrefix));
        return $files = $response->getPath('Contents');
    }
    catch(S3Exception $e) {
        \Drupal::logger('gigya')->error("Failed to get files list from S3 server. Error: " . $e);
    }
    catch(Exception $e) {
        \Drupal::logger('gigya')->error("Missing required parameter - " . $e);
    }
}
function getStorageDetails()
{
    $secretKey = "";
    try
    {
        $storageDetails = \Drupal::config('gigya.job')->get('gigya.storageDetails');
        $helper = new GigyaHelper();
        $bucketName = $storageDetails['bucketName'];
        $accessKey = $storageDetails['accessKey'];
        $secretKeyEnc = $storageDetails['secretKey'];
        if (!empty($secretKeyEnc)) {
            $secretKey = $helper->decrypt($secretKeyEnc);
        }

        $objectKeyPrefix = $storageDetails['objectKeyPrefix'] . "/";
       // return ('#type' => 'textfield', '#title' =>
    }
    catch(Exception $e) {
        \Drupal::logger('gigya')->error("Failed to get Storage Details parameters - " . $e);
    }
}

function loadFileFromServer($fileName)
{
    //TBD: religion, try and catch

    $secretKey = "";
    $storageDetails = \Drupal::config('gigya.job')->get('gigya.storageDetails');
    $helper = new GigyaHelper();
    $bucketName = $storageDetails['bucketName'];
    $accessKey = $storageDetails['accessKey'];
    $secretKeyEnc = $storageDetails['secretKey'];
    if (!empty($secretKeyEnc)) {
        $secretKey = $helper->decrypt($secretKeyEnc);
    }
    $region = getRegion();
    $s3Client = S3Client::factory(array(
        'key' => $accessKey,
        'secret' => $secretKey,
        'signature' => 'v4',
        'region' => $region,
    ));
   // $response = $s3Client->listObjects(array('Bucket' => $bucketName, 'MaxKeys' => 10, 'Prefix' => $objectKeyPrefix));
   // $files = $response->getPath('Contents');

    try {
        $result = $s3Client->getObject(array(
            'Bucket' => $bucketName,
            'Key' => $fileName['Key'],
        ));
        $body = $result->get('Body');
        $body->rewind();
        $content = $body->read($result['ContentLength']);
        return $content;
    }
    catch(S3Exception $e) {
        \Drupal::logger('gigya')->error("Failed to get file from S3 server - " . $e);
    }
}
function getUsers($fileName)
{
    $file = loadFileFromServer($fileName);
    if ($file !== null) {
        //file_get_contents(path,include_path,context,start,max_length)

       // $csv2 = array_map('str_getcsv', str_getcsv($file,"\n"));
        $array = array_map("str_getcsv", explode("\n", $file));
        return $array;
    }
}


/**
 * Implements hook_mail().
 */

function gigya_mail($key, &$message, $params) {
    $options = array(
        'langcode' => 'en'
    );
    switch ($key) {
        case 'job_email':
           // $message['from'] = \Drupal::config('system.site')->get('mail');
            $message['from'] = "goldray518@gmail.com";
            $message['subject'] = t('Node created: @title', array('@title' => $params['node_title']), $options);

            $headers = array(
                'MIME-Version' => '1.0',
                'Content-Type' => 'text/plain; charset=UTF-8; format=flowed; delsp=yes',
                'Content-Transfer-Encoding' => '8Bit',
                'X-Mailer' => 'Drupal',
                'Sender' => 'goldray518@gmail.com',
                'Return-Path' => 'goldray518@gmail.com',
            );
            $message['headers'] = $headers;
            break;
    }
}
function sendEmail($title, $message, $key, $to) {
    $mailManager = \Drupal::service('plugin.manager.mail');
    $module = 'module-name';
    $params['message'] = $message;
    $params['body'][] = $message;
    $params['subject'] = $title;
    $params['title'] = $title;
    //$langcode = \Drupal::currentUser()->getPreferredLangcode();
    $langcode = 'en';
    $send = true;

    $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
    if ($result['result'] != true) {
        $message = t('There was a problem sending your email notification to @email.', array('@email' => $to));
        drupal_set_message($message, 'error');
        \Drupal::logger('mail-log')->error($message);
        return;
    }

    $message = t('An email notification has been sent to @email ', array('@email' => $to));
    drupal_set_message($message);
    \Drupal::logger('mail-log')->notice($message);
}
function getRegion()
{
    $secretKey = "";
    $storageDetails = \Drupal::config('gigya.job')->get('gigya.storageDetails');
    $helper = new GigyaHelper();
    $bucketName = $storageDetails['bucketName'];
    $accessKey = $storageDetails['accessKey'];
    $secretKeyEnc = $storageDetails['secretKey'];
    if (!empty($secretKeyEnc)) {
        $secretKey = $helper->decrypt($secretKeyEnc);
    }

    $s3Client = S3Client::factory(array(
        'key' => $accessKey,
        'secret' => $secretKey,
    ));
    try {
        $response = $s3Client->GetBucketLocation(array('Bucket' => $bucketName,));
        return $response['Location'];
    }
    catch(S3Exception $e) {
        \Drupal::logger('gigya')->error("Failed to get region from S3 server - " . $e);
    }
}

