<?php
	/**
	 * @file    Hooks for this module
	 */

	use Drupal\gigya\Helper\GigyaHelper;
	use Aws\S3\S3Client;
	use Aws\S3\Exception\S3Exception;
	use Drupal\Core\Queue\QueueInterface;
	use Drupal\Core\Queue\QueueWorkerInterface;
	use Drupal\Core\Queue\SuspendQueueException;

	/**
	 * Implements hook_page_attachments().
	 *
	 * @param array $attachments
	 */
	function gigya_hard_delete_page_attachments(array &$attachments) {
		\Drupal::moduleHandler()->invoke('gigya_hard_delete', 'job_cron');
	}

	function delete_uid_queue_name() {
		return 'delete_uid_queue';
	}


	/**
	 * Implements hook_cron().
	 */
	function gigya_hard_delete_cron() {
		$enable_job = \Drupal::config('gigya.job')->get('gigya.enableJob');
        //TBD: change the counter
        $counter_succeed = 0;
        $counter_failed = 0;

        $messageSucceed = "User successfully deleted from CMS - UID: ";
		if ($enable_job)
		{
            $helper = new GigyaHelper();
			$job_frequency = \Drupal::config('gigya.job')->get('gigya.jobFrequency');
			//REQUEST_TIME
			$request_time = \Drupal::time()->getRequestTime();
			//get last run
			$last_run = \Drupal::state()->get('job.last_run', 0); //// FIXME: This might not actually work. It seems to always return 0
            //creates a new queue_file
            $queue_file = \Drupal::queue('job_queue_file');
            $queue_file->deleteQueue();
            $queue_file->createQueue();
            //create queue_users
            $queue_users = \Drupal::queue('job_queue_users');
            $queue_users->createQueue();


			/* If x seconds passed since last time add file to queue_file */
			if (($request_time - $last_run) > $job_frequency) {
                /* Get files from S3 */
                $files = getFileList();
                $queue_file = \Drupal::queue('job_queue_file');
                \Drupal::logger('gigya_hard_delete')->debug(var_export($queue_file, true));
                $last_run = \Drupal::state()->get('job.last_run', 0);

                //add files to queue
                if (!empty($files)) {
                    foreach ($files as $file) {
                        $fileDateTimestamp = strtotime($file['LastModified']);
                        if (($fileDateTimestamp > $last_run) and ($file['Size'] > 0)) {
                            //Add item - file to queue_file
                            $queue_file->createItem($file);
                        }
                    }
                }
                //save counter value on DB and add to log
                $queue_files_counter = $queue_file->numberOfItems();
                \Drupal::state()->set('job.queue_files_counter', $queue_files_counter);
                \Drupal::logger('gigya_hard_delete')->info($queue_files_counter . ' files added to queue at ' . \Drupal::time()->getRequestTime());
            }


            //If queue_file is not empty take item (file) and add all users to queue_users
            while ($queue_file->numberOfItems() > 1) {
                $item = $queue_file->claimItem();
                $item_array = (array) $item;
                $file = $item_array['data']['Key'];
                if ($file !== null) {
                    $accounts = getUsers($file);
                    foreach ($accounts as $account) {
                        foreach ($account as $gigya_uid) {
                            //Add item - account to queue_users
                            $item = array('gigya_uid' => $gigya_uid);
                            $queue_users->createItem($item);
                        }
                    }
                    //remove the file from the queue_file
                    $queue_file->deleteItem($item);
                }
                else {
                    $queue_file->deleteItem($item);
                }
            }


			/* Claim uid from queue_users and delete it */
            while ($queue_users->numberOfItems() > 0) {
                $item = $queue_users->claimItem();
                $item_array = (array)$item;
                $uid = $item_array['data']['gigya_uid'];
                if ($user = $helper->getUidByUUID($uid)) {
                    try {
                        user_delete($user);
                        $counter_succeed++;
                        \Drupal::logger('my_module')->notice($messageSucceed . $user);
                    }
                    catch (\Exception $e) {
                        //add to logs
                        \Drupal::logger('my_module')->error("Failed to delete UID " . $user . " from CMS with error - " . $e);
                        //increase failed counter to send in email
                        $counter_failed++;
                    }
                    $queue_users->deleteItem($uid);
                }
            }

            // Update last run.
            \Drupal::state()->set('job.last_run', $request_time);
            if (($queue_users->numberOfItems() > 0) && ($queue_file->numberOfItems() > 0)) {
                if ($counter_succeed !== 0) /* If job succeed */ //// FIXME: Does not currently work. This variable is always 0, so it always skips to success.
                {
                    //Update last run only on succeed.
                    \Drupal::state()->set('job.last_run', $request_time);  //// FIXME: This might not actually work.
                    //if completed with errors
                    if ($counter_failed > 0)
                    {
                        $subject = "Deleted users job completed with errors";
                    } //if succeed
                    else
                    {
                        $subject = "Deleted users job completed successfully";
                    }
                    $total = $counter_failed + $counter_succeed;

                    /* Send email on succeed */
                    $message = "CMS delete job succeed for " . $counter_succeed . "/" . $total . "users.";
                    $to = \Drupal::config('gigya.job')->get('gigya.emailOnSuccess');
                    sendEmail($subject, $message, $to);
                }
                /* If job failed, send email */
                else {
                    $total = $counter_failed + $counter_succeed;
                    $message = "CMS delete job failed (total of " . $total . ").";
                    $subject = "Deleted users job failed";
                    $to = \Drupal::config('gigya.job')->get('gigya.emailOnFailure');
                    sendEmail($subject, $message, $to);
                }
            }

		}
	}
    function add_files_to_queue()
    {


    }

    function add_users_to_queue() {

    }

	/**
	 * Function connect to S3 and retrieves all files in bucket (name only)
	 */
	function getFileList() {
		try
		{
			$secretKey = '';
			$storageDetails = \Drupal::config('gigya.job')->get('gigya.storageDetails');
			$helper = new GigyaHelper();
			$bucketName = $storageDetails['bucketName'];
			$accessKey = $storageDetails['accessKey'];
			$secretKeyEnc = $storageDetails['secretKey'];
			if (!empty($secretKeyEnc))
			{
				$secretKey = $helper->decrypt($secretKeyEnc);
			}
			$objectKeyPrefix = $storageDetails['objectKeyPrefix'] . "/";
			$region = getRegion();
			$s3Client = S3Client::factory(array(
											  'key' => $accessKey,
											  'secret' => $secretKey,
											  'signature' => 'v4',
											  'region' => $region,
										  ));

			/* Max of 15 files */
			$response = $s3Client->listObjects(array(
												   'Bucket' => $bucketName,
												   'MaxKeys' => 15,
												   'Prefix' => $objectKeyPrefix)
			);
			return $files = $response->getPath('Contents');
		}
		catch (S3Exception $e)
		{
			\Drupal::logger('gigya_hard_delete')->error("Failed to get files list from S3 server. Error: " . $e->getMessage());
			return false;
		}
		catch (Exception $e)
		{
			\Drupal::logger('gigya_hard_delete')->error("Missing required parameter. Error code: " . $e->getCode() . ". Message: " . $e->getMessage());
			return false;
		}
	}

	/**
	 * Function return file content
	 *
	 * @param    array $file_name File name
	 *
	 * @return    bool                File content
	 */
	function loadFileFromServer($file_name) {
		/* Get S3 connection details from DB */
		$secretKey = '';
		$storageDetails = \Drupal::config('gigya.job')->get('gigya.storageDetails');
		$helper = new GigyaHelper();
		$bucketName = $storageDetails['bucketName'];
		$accessKey = $storageDetails['accessKey'];
		$secretKeyEnc = $storageDetails['secretKey'];
		if (!empty($secretKeyEnc))
		{
			$secretKey = $helper->decrypt($secretKeyEnc);
		}
		$region = getRegion();
		$s3Client = S3Client::factory(array(
										  'key' => $accessKey,
										  'secret' => $secretKey,
										  'region' => $region,
										  'signature' => 'v4',
									  ));

		/* Read file from S3 */
		try
		{
			$result = $s3Client->getObject(array(
											   'Bucket' => $bucketName,
											   'Key' => $file_name,
										   ));
			$body = $result->get('Body');
			$body->rewind();
			$content = $body->read($result['ContentLength']);
			return $content;
		}
		catch (S3Exception $e)
		{
			\Drupal::logger('gigya_hard_delete')->error("Failed to get file from S3 server - " . $e->getMessage());
			return false;
		}
	}

	/**
	 * Parse file content to array of Gigya UIDs
	 *
	 * @param    $fileName
	 *
	 * @return array | null
	 */
	function getUsers($fileName) {
		$file = loadFileFromServer($fileName);
		if ($file !== null)
		{
			$array = array_map('str_getcsv', explode("\n", $file));
			array_walk($array, function(&$a) use ($array) {
				$a = array_combine($array[0], $a);
			});
			array_shift($array); /* Remove column header */
			return $array;
		}
		return null;
	}

	/**
	 * Send email
	 *
	 * @param    $subject
	 * @param    $message
	 * @param    $to
	 */
	function sendEmail($subject, $message, $to) {
		$mailManager = \Drupal::service('plugin.manager.mail');
		$module = 'gigya';
		$params['subject'] = $subject;
		$params['body'] = $message;
		$key = "job_email";
		$langcode = \Drupal::currentUser()->getPreferredLangcode();
		if (!$langcode)
		{
			$langcode = 'en';
		}
		$send = true;
		try
		{
			foreach (explode(",", $to) as $email)
			{
				$result = $mailManager->mail($module, $key, $email, $langcode, $params, NULL, $send);
				if (!$result)
				{
					\Drupal::logger('gigya_hard_delete')->error("Failed to send email to " . $email);
				}
			}
		}
		catch (Exception $e)
		{
			\Drupal::logger('gigya_hard_delete')->error("Failed to send emails - " . $e->getMessage());
		}
	}

	/**
	 * Get S3 Region
	 *
	 * @return string | false
	 */
	function getRegion() {
		//Get S3 connection details from DB
		$secretKey = "";
		$storageDetails = \Drupal::config('gigya.job')->get('gigya.storageDetails');
		$helper = new GigyaHelper();
		$bucketName = $storageDetails['bucketName'];
		$accessKey = $storageDetails['accessKey'];
		$secretKeyEnc = $storageDetails['secretKey'];
		//decrypt S3 secret
		if (!empty($secretKeyEnc))
		{
			$secretKey = $helper->decrypt($secretKeyEnc);
		}
		$s3Client = S3Client::factory(array(
										  'key' => $accessKey,
										  'secret' => $secretKey,
									  ));
		try
		{
			$response = $s3Client->GetBucketLocation(array('Bucket' => $bucketName,));
			return $response->get('Location');
		}
		catch (S3Exception $e)
		{
			\Drupal::logger('gigya_hard_delete')->error("Failed to get region from S3 server - " . $e->getMessage());
			return false;
		}
	}