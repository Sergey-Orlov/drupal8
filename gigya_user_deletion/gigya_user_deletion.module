<?php
	/**
	 * @file    Hooks for this module
	 */

	use Drupal\gigya\Helper\GigyaHelper;
	use Aws\S3\S3Client;
	use Aws\S3\Exception\S3Exception;

	/**
	 * Implements hook_page_attachments().
	 *
	 * @param array $attachments
	 */
	function gigya_user_deletion_page_attachments(array &$attachments) {
		\Drupal::moduleHandler()->invoke('gigya_user_deletion', 'job_cron');
	}

	function delete_uid_queue_name() {
		return 'delete_uid_queue';
	}

	/**
	 * Implements hook_cron().
	 */
	function gigya_user_deletion_cron() {
		\Drupal::logger('gigya_user_deletion')->info('Gigya cron started');
		$enable_job = \Drupal::config('gigya.job')->get('gigya.enableJob');

		//Get counters from DB or set 0 if null
		$counter_succeed = \Drupal::state()->get('job.counter_succeed', 0);
		$counter_failed = \Drupal::state()->get('job.counter_failed', 0);

		$messageSucceed = "User successfully deleted from CMS - UID: ";
		if ($enable_job)
		{
			if (!class_exists('S3Client'))
			{
				\Drupal::logger('gigya_user_deletion')->error('Cron could not continue. This module requires the Amazon SDK for PHP. Please install the SDK before enabling the module.');
				return false;
			}

			$helper = new GigyaHelper();
			$job_frequency = \Drupal::config('gigya.job')->get('gigya.jobFrequency');
			//REQUEST_TIME
			$request_time = \Drupal::time()->getRequestTime();
			//get last run
			$last_run = \Drupal::state()->get('job.last_run', 0);
			//creates a new queue_file
			$queue_file = \Drupal::queue('job_queue_file');
			$queue_file->createQueue();
			//create queue_users
			$queue_users = \Drupal::queue('job_queue_users');
			$queue_users->createQueue();

			/* If x seconds passed since last time add file to queue_file */
			if (($request_time - $last_run) > $job_frequency)
			{
				/* Get files from S3 */
				$files = getFileList();
				$queue_file = \Drupal::queue('job_queue_file');
				$last_run = \Drupal::state()->get('job.last_run', 0);

				//add files to queue
				if (!empty($files))
				{
					foreach ($files as $file)
					{
						$fileDateTimestamp = strtotime($file['LastModified']);
						if (($fileDateTimestamp > $last_run) and ($file['Size'] > 0))
						{
							//Add item - file to queue_file
							$queue_file->createItem($file);
						}
					}
				}
				//save counter value on DB and add to log
				$queue_files_counter = $queue_file->numberOfItems();
				\Drupal::state()->set('job.queue_files_counter', $queue_files_counter);
				\Drupal::logger('gigya_user_deletion')->info($queue_files_counter . ' files added to queue at ' . date('mm/dd/YYYY', \Drupal::time()->getRequestTime()));
			}

			//If queue_file is not empty take item (file) and add all users to queue_users
			while ($queue_file->numberOfItems() > 0)
			{
				$item_file = $queue_file->claimItem();
				$item_array = (array)$item_file;
				$file = $item_array['data']['Key'];
				if ($file !== null)
				{
					$accounts = getUsers($file);
					foreach ($accounts as $account)
					{
						foreach ($account as $gigya_uid)
						{
							//Add item - account to queue_users
							$item_user = array('gigya_uid' => $gigya_uid);
							$queue_users->createItem($item_user);
						}
					}

				}
                //remove the file from the queue_file
				$queue_file->deleteItem($item_file);
			}
            //Update last run when file queue is empty.
            \Drupal::state()->set('job.last_run', $request_time);

			/* Claim uid from queue_users and delete it */
			while ($queue_users->numberOfItems() > 0)
			{
				$item_user = $queue_users->claimItem();
				$item_array = (array)$item_user;
				$uid = $item_array['data']['gigya_uid'];
				if ($user = $helper->getUidByUUID($uid))
				{
					try
					{
						user_delete($user->get('uid')->value);
						$counter_succeed++;
                        \Drupal::state()->set('job.counter_succeed', $counter_succeed);
						\Drupal::logger('gigya_user_deletion')->notice($messageSucceed . $user->get('uid')->value);
					}
					catch (\Exception $e)
					{
						//add to logs
						\Drupal::logger('gigya_user_deletion')->error("Failed to delete UID " . $user->get('uid')->value . " from CMS with error - " . $e);
						//increase failed counter to send in email
						$counter_failed++;
                        \Drupal::state()->set('job.counter_succeed', $counter_failed);
					}
				}
                else {
                    \Drupal::logger('gigya_user_deletion')->error("Failed to delete UID " . $uid . " from CMS with error - user doesn't exist");
                }
                $queue_users->deleteItem($item_user);
			}

			if (($queue_users->numberOfItems() == 0) && ($queue_file->numberOfItems() == 0))
			{
                //If full succeed or partial
				if ($counter_succeed > 0)
				{
                    $total = $counter_failed + $counter_succeed;
					//if completed with errors
					if ($counter_failed > 0)
					{
						$subject = "User deletion job completed with errors";
                        $message = "The user deletion job scheduled to run for " . $_SERVER['SERVER_NAME'] . ' at ' . $last_run . ' completed with errors.' . $counter_succeed . " out of " . $total . ' users were deleted.';
					}
					/* Send email on succeed */
					else
					{
						$subject = "Users deleted successfully";
                        $message = "The user deletion job scheduled to run for " . $_SERVER['SERVER_NAME'] . ' at ' . $last_run . ' completed successfully.' . $counter_succeed . " out of " . $total . ' users were deleted.';
					}
					$to = \Drupal::config('gigya.job')->get('gigya.emailOnSuccess');
					sendEmail($subject, $message, $to);
				}
				/* If job failed, send email */
				elseif ($counter_failed > 0)
				{
                    $subject = "Failed to delete users";
                    $message = "The user deletion job scheduled to run for " . $_SERVER['SERVER_NAME'] . ' at ' . $last_run . ' has failed. No users were deleted.';
					$to = \Drupal::config('gigya.job')->get('gigya.emailOnFailure');
					sendEmail($subject, $message, $to);
				}
                //Reset counters on DB
                \Drupal::state()->set('job.counter_succeed', 0);
                \Drupal::state()->set('job.counter_failed', 0);
			}
		}
	}

	/**
	 * Function connect to S3 and retrieves all files in bucket (name only)
	 */
	function getFileList() {
		if (!class_exists('S3Client'))
		{
			\Drupal::logger('gigya_user_deletion')->error('This module requires the Amazon SDK for PHP. Please install the SDK before enabling the module.');
			return false;
		}

		try
		{
			$secretKey = '';
			$storageDetails = \Drupal::config('gigya.job')->get('gigya.storageDetails');
			$helper = new GigyaHelper();
			$bucketName = $storageDetails['bucketName'];
			$accessKey = $storageDetails['accessKey'];
			$secretKeyEnc = $storageDetails['secretKey'];
			if (!empty($secretKeyEnc))
			{
				$secretKey = $helper->decrypt($secretKeyEnc);
			}
			$objectKeyPrefix = $storageDetails['objectKeyPrefix'] . "/";
			$region = getRegion();
			$s3Client = S3Client::factory(array(
											  'key' => $accessKey,
											  'secret' => $secretKey,
											  'signature' => 'v4',
											  'region' => $region,
										  ));

			/* Max of 15 files */
			$response = $s3Client->listObjects(array(
												   'Bucket' => $bucketName,
												   'MaxKeys' => 15,
												   'Prefix' => $objectKeyPrefix)
			);
			return $files = $response->getPath('Contents');
		}
		catch (S3Exception $e)
		{
			\Drupal::logger('gigya_user_deletion')->error("Failed to get files list from S3 server. Error: " . $e->getMessage());
			return false;
		}
		catch (Exception $e)
		{
			\Drupal::logger('gigya_user_deletion')->error("Missing required parameter. Error code: " . $e->getCode() . ". Message: " . $e->getMessage());
			return false;
		}
	}

	/**
	 * Function return file content
	 *
	 * @param    array $file_name File name
	 *
	 * @return    bool                File content
	 */
	function loadFileFromServer($file_name) {
		/* Get S3 connection details from DB */
		$secretKey = '';
		$storageDetails = \Drupal::config('gigya.job')->get('gigya.storageDetails');
		$helper = new GigyaHelper();
		$bucketName = $storageDetails['bucketName'];
		$accessKey = $storageDetails['accessKey'];
		$secretKeyEnc = $storageDetails['secretKey'];
		if (!empty($secretKeyEnc))
		{
			$secretKey = $helper->decrypt($secretKeyEnc);
		}
		$region = getRegion();
		$s3Client = S3Client::factory(array(
										  'key' => $accessKey,
										  'secret' => $secretKey,
										  'region' => $region,
										  'signature' => 'v4',
									  ));

		/* Read file from S3 */
		try
		{
			$result = $s3Client->getObject(array(
											   'Bucket' => $bucketName,
											   'Key' => $file_name,
										   ));
			$body = $result->get('Body');
			$body->rewind();
			$content = $body->read($result['ContentLength']);
			return $content;
		}
		catch (S3Exception $e)
		{
			\Drupal::logger('gigya_user_deletion')->error("Failed to get file from S3 server - " . $e->getMessage());
			return false;
		}
	}

	/**
	 * Parse file content to array of Gigya UIDs
	 *
	 * @param    $fileName
	 *
	 * @return array | null
	 */
	function getUsers($fileName) {
		$file = loadFileFromServer($fileName);
		if ($file !== null)
		{
			$array = array_map('str_getcsv', explode("\n", $file));
			array_walk($array, function(&$a) use ($array) {
				$a = array_combine($array[0], $a);
			});
			array_shift($array); /* Remove column header */
			return $array;
		}
		return null;
	}

	/**
	 * Implement hook_mail()
	 *
	 * {@inheritdoc}
	 */
	function gigya_user_deletion_mail($key, &$message, $params) {
		$options = array(
			'langcode' => $message['langcode'],
		);

		$message['from'] = \Drupal::config('system.site')->get('mail');
		$message['subject'] = t($params['subject'], array(), $options);
		$message['body'][] = $params['message'];
	}

	/**
	 * Send email
	 *
	 * @param    $subject
	 * @param    $body
	 * @param    $to
	 */
	function sendEmail($subject, $body, $to) {
		$mailManager = \Drupal::service('plugin.manager.mail');
		$module = 'gigya_user_deletion';
        $params['from'] = 'Gigya IdentitySync';
		$params['subject'] = $subject;
		$params['message'] = $body;
		$key = 'job_email';
		$langcode = \Drupal::currentUser()->getPreferredLangcode();
		if (!$langcode)
		{
			$langcode = 'en';
		}
		try
		{
			foreach (explode(",", $to) as $email)
			{
				$result = $mailManager->mail($module, $key, $email, $langcode, $params, null, $send = true);
				if (!$result)
				{
					\Drupal::logger('gigya_user_deletion')->error("Failed to send email to " . $email);
				}
			}
		}
		catch (Exception $e)
		{
			\Drupal::logger('gigya_user_deletion')->error("Failed to send emails - " . $e->getMessage());
		}
	}

	/**
	 * Get S3 Region
	 *
	 * @return string | false
	 */
	function getRegion() {
		//Get S3 connection details from DB
		$secretKey = "";
		$storageDetails = \Drupal::config('gigya.job')->get('gigya.storageDetails');
		$helper = new GigyaHelper();
		$bucketName = $storageDetails['bucketName'];
		$accessKey = $storageDetails['accessKey'];
		$secretKeyEnc = $storageDetails['secretKey'];
		//decrypt S3 secret
		if (!empty($secretKeyEnc))
		{
			$secretKey = $helper->decrypt($secretKeyEnc);
		}
		$s3Client = S3Client::factory(array(
										  'key' => $accessKey,
										  'secret' => $secretKey,
									  ));
		try
		{
			$response = $s3Client->GetBucketLocation(array('Bucket' => $bucketName,));
			return $response->get('Location');
		}
		catch (S3Exception $e)
		{
			\Drupal::logger('gigya_user_deletion')->error("Failed to get region from S3 server - " . $e->getMessage());
			return false;
		}
	}