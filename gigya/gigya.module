<?php
use Drupal\gigya\Helper\GigyaHelper;
use Aws\S3\S3Client;
use Aws\S3\Exception\S3Exception;
use Drupal\Component\Utility;
use Drupal\Core\Queue\QueueWorkerBase;
use Drupal\Core\Queue\QueueFactory;
use Drupal\Core\Queue\QueueWorkerManager;
use Drupal\Core\Queue\QueueWorkerInterface;
use Drupal\Core\Queue\QueueInterface;

use Drupal\Core\Queue;

/**
 * Implements hook_page_attachments().
 * @param array $attachments
 */
function gigya_page_attachments(array &$attachments) {
  //Check for api key.
  $api_key = \Drupal::config('gigya.settings')->get('gigya.gigya_api_key');
  if (!empty($api_key)) {
    //Add gigya params to drupalSettings.
    $global_params = \Drupal::config('gigya.global')->get('gigya.globalParameters');
    \Drupal::moduleHandler()->alter('gigya_global_parameters', $global_params);

    $attachments['#attached']['drupalSettings']['gigya']['globalParameters'] = $global_params;
    $attachments['#attached']['drupalSettings']['gigya']['apiKey'] = \Drupal::config('gigya.settings')->get('gigya.gigya_api_key');
    $attachments['#attached']['drupalSettings']['gigya']['dataCenter'] = \Drupal::config('gigya.settings')->get('gigya.gigya_data_center');

    $lang = \Drupal::config('gigya.global')->get('gigya.language');
    //Check if lang is in auto mode.
    if (strtolower($lang) == 'auto') {
      $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();

      $helper = new GigyaHelper();

      $languages = $helper->getGigyaLanguages();

      if (!array_key_exists($lang, $languages)) {
        //If we do not have the lang in gigya set the lang to the fallback.
        $lang = \Drupal::config('gigya.global')->get('gigya.languageFallback');
      }
    }

    \Drupal::moduleHandler()->alter('gigya_lang', $lang);
    $attachments['#attached']['drupalSettings']['gigya']['lang'] = $lang;

    // Add Library.
    $attachments['#attached']['library'][] = 'gigya/drupalGigya';
  }
  //Call gigya_job_cron();
   \Drupal::moduleHandler()->invoke('gigya','job_cron');


}

function delete_uid_queue_name() {
    return 'delete_uid_queue';
}


/**
 * Implements hook_cron().
 */
function gigya_cron() {
    $enable_job = \Drupal::config('gigya.job')->get('gigya.enableJob');
    $counter_succeed = 0;
    $counter_failed = 0;
    if ($enable_job) {
        $job_frequency = \Drupal::config('gigya.job')->get('gigya.jobFrequency');
        //REQUEST_TIME
        $request_time = \Drupal::time()->getRequestTime();
        //update last run
        $last_run = \Drupal::state()->get('job.last_run', 0);
        // If x seconds passed since last time delete job run
        if (($request_time - $last_run) > $job_frequency) {
            //Add delete-user job to queue
          //  $queue_factory = \Drupal::service('queue');
            //creates a new DatabaseQueue

            $queue = \Drupal::queue('job_queue');
            $queue->createQueue();

            //Get files from S3
            $files = filesList();
            //Run delete users on each file
            foreach ($files as $file) {
                //Add item - file to queue
              //  $queue->createItem($file);

                $fileDateTimestamp = strtotime($file['LastModified']);
                if (($fileDateTimestamp > $last_run) && ($file['Size'] > 0)) {
                    //Get all Gigya UIDs from file to array
                    $accounts = getUsers($file);
                    //Delete user
                    for ($i = 1; $i < count($accounts); $i++) {
                        foreach ($accounts[$i] as $gigya_uid) {
                            //Add item - account to queue
                            $item = array('gigya_uid' => $gigya_uid);
                          //  DrupalQueue::get(delete_uid_queue_name())->createItem($item);
                            $queue->createItem($item);
                            $count = $queue->numberOfItems();
                            $queue->processItem($item);
                            $queue->deleteItem($item);
                          //  runQueue();
                            $count = $queue->numberOfItems();
                        }
                        //If job failed, send email
                        if ($counter_succeed === 0) {
                            $total = $counter_failed + $counter_succeed;
                            $message = "CMS delete job failed (total of " . $total . ").";
                            $subject = "Deleted users job failed";
                            $to = \Drupal::config('gigya.job')->get('gigya.emailOnFailure');
                            sendEmail($subject, $message, $to);

                        } //If job succeed
                        else {
                            //Update last run only on succeed.
                            \Drupal::state()->set('job.last_run', $request_time);
                            //if completed with errors
                            if ($counter_failed > 0) {
                                $subject = "Deleted users job completed with errors";
                            } //if succeed
                            else {
                                $subject = "Deleted users job completed successfully";
                            }
                            $total = $counter_failed + $counter_succeed;
                            //Send email on succeed
                            $message = "CMS delete job succeed for " . $counter_succeed . "/" . $total . "users.";
                            $to = \Drupal::config('gigya.job')->get('gigya.emailOnSuccess');
                            sendEmail($subject, $message, $to);
                        }
                    }
                    $itemsNum = $queue->numberOfItems();
                }
            }
        }
    }
}

function runQueue() {
    /** @var QueueInterface $queue */
    $queue = \Drupal::queue('job_queue');
    /** @var QueueWorkerInterface $queue_worker */

    while($item = $queue->claimItem()) {
        try {
            $count = $queue->numberOfItems();
            $queue->processItem($item->data);
            $queue->deleteItem($item);
        }
        catch (SuspendQueueException $e) {
            $queue->releaseItem($item);
            break;
        }
        catch (\Exception $e) {
            watchdog_exception('gigya', $e);
        }
    }
}

//Function connect to S3 and retrieves all files in bucket (name only)
function filesList()
{
//	\Drupal::logger('file list called');
    try
    {
        $secretKey = "";
        $storageDetails = \Drupal::config('gigya.job')->get('gigya.storageDetails');
        $helper = new GigyaHelper();
        $bucketName = $storageDetails['bucketName'];
        $accessKey = $storageDetails['accessKey'];
        $secretKeyEnc = $storageDetails['secretKey'];
        if (!empty($secretKeyEnc))
        {
            $secretKey = $helper->decrypt($secretKeyEnc);
        }
        $objectKeyPrefix = $storageDetails['objectKeyPrefix'] . "/";
        $region = getRegion();
        $s3Client = S3Client::factory(array(
            'key' => $accessKey,
            'secret' => $secretKey,
            'signature' => 'v4',
            'region' => $region,
        ));
        //Max of 15 files
        $response = $s3Client->listObjects(array('Bucket' => $bucketName, 'MaxKeys' => 15, 'Prefix' => $objectKeyPrefix));
        return $files = $response->getPath('Contents');
    }
    catch(S3Exception $e) {
        \Drupal::logger('gigya')->error("Failed to get files list from S3 server. Error: " . $e->getMessage());
    }
    catch(Exception $e) {
        \Drupal::logger('gigya')->error("Missing required parameter - " . $e->getMessage());
    }
}

//Function return file content
//Input: file name
//Output: file content
function loadFileFromServer($file_name) {
    //Get S3 connection details from DB
    $secretKey = "";
    $storageDetails = \Drupal::config('gigya.job')->get('gigya.storageDetails');
    $helper = new GigyaHelper();
    $bucketName = $storageDetails['bucketName'];
    $accessKey = $storageDetails['accessKey'];
    $secretKeyEnc = $storageDetails['secretKey'];
    if (!empty($secretKeyEnc)) {
        $secretKey = $helper->decrypt($secretKeyEnc);
    }
    $region = getRegion();
    $s3Client = S3Client::factory(array(
        'key' => $accessKey,
        'secret' => $secretKey,
        'signature' => 'v4',
        'region' => $region,
    ));
    //Read file from S3
    try {
        $result = $s3Client->getObject(array(
            'Bucket' => $bucketName,
            'Key' => $file_name['Key'],
        ));
        $body = $result->get('Body');
        $body->rewind();
        $content = $body->read($result['ContentLength']);
        return $content;
    }
    catch (S3Exception $e) {
        \Drupal::logger('gigya')->error("Failed to get file from S3 server - " . $e->getMessage());
    }
}
//Parse file content to array of Gigya UIDs
function getUsers($fileName) {
    $file = loadFileFromServer($fileName);
    if ($file !== null) {
        $array = array_map("str_getcsv", explode("\n", $file));
        return $array;
    }
}
//Send email
function sendEmail($subject, $message, $to) {
    $mailManager = \Drupal::service('plugin.manager.mail');
    $module = 'gigya';
    $params['subject'] = $subject;
    $params['body'] = $message;
    $key = "job_email";
    $langcode = \Drupal::currentUser()->getPreferredLangcode();
    if (!$langcode)    {
        $langcode = 'en';
    }
    $send = true;
    try {
        foreach (explode(",", $to) as $email) {
            $result = $mailManager->mail($module, $key, $email, $langcode, $params, NULL, $send);
            if (!$result) {
                \Drupal::logger('gigya')->error("Failed to send email to " . $email);
            }
        }
    }
    catch(Exception $e) {
        \Drupal::logger('gigya')->error("Failed to send emails - " . $e->getMessage());
    }
}
//Get S3 region
function getRegion()
{
    //Get S3 connection details from DB
    $secretKey = "";
    $storageDetails = \Drupal::config('gigya.job')->get('gigya.storageDetails');
    $helper = new GigyaHelper();
    $bucketName = $storageDetails['bucketName'];
    $accessKey = $storageDetails['accessKey'];
    $secretKeyEnc = $storageDetails['secretKey'];
    //decrypt S3 secret
    if (!empty($secretKeyEnc)) {
        $secretKey = $helper->decrypt($secretKeyEnc);
    }
    $s3Client = S3Client::factory(array(
        'key' => $accessKey,
        'secret' => $secretKey,
    ));
    try {
        $response = $s3Client->GetBucketLocation(array('Bucket' => $bucketName,));
        return $response['Location'];
    }
    catch(S3Exception $e) {
        \Drupal::logger('gigya')->error("Failed to get region from S3 server - " . $e->getMessage());
    }
}